parameters:
- name: microserviceName
  type: string
- name: assemblyName
  type: string
- name: namespace
  type: string
  values:
  - 'frontend'
  - 'orchestration'
  - 'backend'
- name: tribe
  type: string
  values:
  - 'enabler'
  - 'client'
  - 'user'
- name: jiraTestsId
  type: string
  default: ''
  
stages:
- stage: build
  displayName: Build
  jobs:
  - template: ./build.yaml@pipelines

- stage: dev
  displayName: Deploy to Dev
  condition: or(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')), and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feat')))
  variables: 
  - group: Tools
  - name: publicUrl
    ${{ if eq( parameters['namespace'], 'frontend') }}:
      value: 'dev2.smarter.edenred.io'
    ${{ else }}:
      value: ''
  jobs:
  - deployment: 
    environment: 'dev-${{ parameters.tribe }}'
  - template: ./deploy.yaml@pipelines
    parameters:
      microserviceName: '${{ parameters.microserviceName }}'
      pool: 'SmartER-dev'
      environment: 'dev'
      aspNetCoreEnvironment: 'Dev'
      namespace: '${{ parameters.namespace }}'
      azureServiceConnection: 'Azure_DEV'
      acrName: 'esmappinteg1acrd'
      paasEnvironment: 'dev'
      aksResourceGroup: 'smarter-app-integ-dev-rg'
      aksName: 'esm-app-integ-1-aks-d'
      privateUrl: 'smarter-dev2.edenred.net'
      publicUrl: '${{ variables.publicUrl }}'
      artifactName: '$(Build.Repository.Name)'
  - job: automatedtests
    displayName: Run automated tests
    dependsOn: deploy
    condition: and(succeeded(), ne('${{ parameters.jiraTestsId }}', ''))
    steps:
    - checkout: pipelines
    - task: PowerShell@2
      displayName: 'Run Test - ${{ parameters.jiraTestsId }}'
      inputs:
        pwsh: true
        targetType: 'filePath'
        filePath: './invoke-pipeline.ps1'
        arguments: >
          -testplan '${{ parameters.jiraTestsId }}'
          -pat '$(System.AccessToken)'
          -environment 'development'

- stage: uat
  displayName: Deploy to Uat
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'))
  dependsOn: ["build"]
  variables:
  - group: Tools
  - name: publicUrl
    ${{ if eq( parameters['namespace'], 'frontend') }}:
      value: 'uat.smarter.edenred.io'
    ${{ else }}:
      value: ''
  jobs:
  - deployment: 
    environment: 'uat-${{ parameters.tribe }}'
  - template: ./deploy.yaml@pipelines
    parameters:
      microserviceName: '${{ parameters.microserviceName }}'
      pool: 'SmartER-uat'
      environment: 'uat'
      aspNetCoreEnvironment: 'Uat'
      namespace: '${{ parameters.namespace }}'
      azureServiceConnection: 'Azure_UAT'
      acrName: 'esmappinteg1acru'
      paasEnvironment: 'UAT'
      aksResourceGroup: 'smarter-app-integ-uat-rg'
      aksName: 'esm-app-integ-1-aks-u'
      privateUrl: 'smarter-uat.edenred.net'
      publicUrl: '${{ variables.publicUrl }}'
      artifactName: '$(Build.Repository.Name)'

- stage: prd
  displayName: Deploy to Prod
  dependsOn: uat
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
  - group: Tools
  - name: publicUrl
    ${{ if eq( parameters['namespace'], 'frontend') }}:
      value: 'prd.smarter.edenred.io'
    ${{ else }}:
      value: ''
  jobs:
  - deployment: 
    environment: 'prd-${{ parameters.tribe }}'
  - template: ./deploy.yaml@pipelines
    parameters:
      microserviceName: '${{ parameters.microserviceName }}'
      pool: 'SmartER-prd'
      environment: 'prod'
      aspNetCoreEnvironment: 'Production'
      namespace: '${{ parameters.namespace }}'
      azureServiceConnection: 'Azure_PROD'
      acrName: 'esmappinteg1acrp'
      paasEnvironment: 'PROD'
      aksResourceGroup: 'smarter-app-integ-prd-rg'
      aksName: 'esm-app-integ-1-aks-p'
      privateUrl: 'smarter.edenred.net'
      publicUrl: '${{ variables.publicUrl }}'
      artifactName: '$(Build.Repository.Name)'