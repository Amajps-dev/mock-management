parameters:
  sonarProjectName: ""

steps:
- task: NuGetCommand@2
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: Install GitVersion
  inputs:
    command: custom
    arguments: 'install GitVersion.CommandLine -PreRelease -Version 5.1.3 -OutputDirectory $(Build.SourcesDirectory)\packages'

- powershell: |
    function AddXmlElement([string] $path, [string] $version) {
      $proj = [xml](Get-Content $path)
      if( $proj.Project.PropertyGroup.Version -ne $null) {
        $proj.SelectNodes("/Project/PropertyGroup/Version")[0].InnerText = [version]($version)
      } else {
        $child = $proj.CreateElement("Version")
        $child.innerXml = $version
        $proj.Project.PropertyGroup.AppendChild($child)
      }
      $proj.Save($path)
    }

    $gitversion = ($(Build.SourcesDirectory)\packages\GitVersion.CommandLine.5.1.3\tools\GitVersion.exe /nofetch) -join '' | ConvertFrom-Json

    $gitPrefix = $gitversion.MajorMinorPatch
    $gitSuffix = $gitversion.CommitsSinceVersionSource
    $version = $gitversion.FullSemVer
    $projects = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter *.csproj -Recurse

    foreach ($project in $projects) {
        AddXmlElement $project.FullName $version
    }

    Write-Host ("##vso[build.updatebuildnumber]{0}" -f $gitversion.NuGetVersionV2)
    Write-Host ("##vso[task.setvariable variable=Version.SemVer;]{0}" -f $gitversion.SemVer)
    Write-Host ("##vso[task.setvariable variable=Version.FullSemVer;]{0}" -f $gitversion.FullSemVer)
  displayName: Compute version and update build number
  condition: ne(variables['Build.Reason'], 'PullRequest')

# - template: cache-nuget.yml

- task: SonarCloudPrepare@1
  displayName: Prepare analysis on SonarCloud
  inputs:
    SonarCloud: "smartER-sonarcloud"
    organization: "edenred-emea-benefits"
    projectKey: edenred-emea-benefits_${{ parameters.sonarProjectName }}
    projectName: ${{ parameters.sonarProjectName }}
    projectVersion: '$(Build.BuildNumber)'
    extraProperties: |
      sonar.exclusions=**/obj/**,**/*.dll

- task: DotNetCoreCLI@2
  displayName: Restore Projects
  inputs:
    command: restore
    projects: '**/*.sln'
    vstsFeed: 'b95ddfc1-aa53-4ce8-8d18-44340050b2ee'
    verbosityRestore: Normal

- task: DotNetCoreCLI@2
  displayName: Build Solution
  inputs:
    command: build
    projects: '**/*.sln'
    arguments: '-c Release'

- task: DotNetCoreCLI@2
  displayName: Test
  condition: succeeded()
  inputs:
    command: test
    projects: |
     **/*.Test.csproj
     **/*.Tests.csproj
    arguments: '--no-build --nologo -c Release --collect "Code coverage"'
    testRunTitle: '$(Build.DefinitionName)-$(Build.BuildNumber)'
  timeoutInMinutes: 10
  continueOnError: false

- task: SonarCloudAnalyze@1
  condition: succeeded()
  displayName: 'Run Code Analysis'
  enabled: true

- task: DotNetCoreCLI@2
  displayName: Pack
  inputs:
    command: pack
    projects: |
      src/**/*.csproj
    arguments: '-p:PackageVersion=$(Build.BuildNumber) -o $(Build.ArtifactStagingDirectory) --include-symbols --verbosity normal'
    verbosityPack: Normal

- task: PublishSymbols@2
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: 'Publish symbols'
  inputs:
    SymbolsFolder: '$(Build.ArtifactStagingDirectory)'
    SearchPattern: '**/*.pdb'
    SymbolServerType: teamServices
    TreatNotIndexedAsWarning: true
    SymbolsArtifactName: 'Symbols_$(Build.BuildId)-$(Build.BuildNumber)'

- task: PublishBuildArtifacts@1
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: 'Publish Artifact'
  inputs:
    ArtifactName: 'packages'