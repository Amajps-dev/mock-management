steps:
  - task: gitversion/setup@0
    displayName: Install GitVersion
    inputs:
      versionSpec: '5.x'

  - task: gitversion/execute@0
    displayName: Calculate version
    inputs:
      useConfigFile: True
      configFilePath: 'gitversion.yml'
      # configFilePath: "./$(Build.Repository.Name)/gitversion.yml"
      # targetPath: './'

  - task: PowerShell@2
    displayName: Update version
    inputs:
      targetType: 'inline'
      script: |
        function AddXmlElement([string]$node, [string] $path, [string] $version) {
          $proj = [xml](Get-Content $path)

          if($proj.Project.PropertyGroup -is [array]){
            $propertyGroup = $proj.Project.PropertyGroup[0]
          }else{
            $propertyGroup = $proj.Project.PropertyGroup
          }

          if($null -ne $PropertyGroup[$node]) {
            $propertyGroup.SelectNodes($node)[0].InnerText = $version
          }else{
            $child = $proj.CreateElement($node)
            $child.innerXml = $version
            $propertyGroup.AppendChild($child)
          }

          $proj.Save($path)
        }

        $assemblyVersion = "$(GitVersion.Major).$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.CommitsSinceVersionSource)"

        $projects = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter *.csproj -Recurse

        foreach ($project in $projects) {
          AddXmlElement "Version" $project.FullName $assemblyVersion
          AddXmlElement "AssemblyVersion" $project.FullName $assemblyVersion
          AddXmlElement "FileVersion" $project.FullName $assemblyVersion
        }

        Write-Host "Release version is '$(GitVersion.SemVer)'."
        Write-Host "##vso[build.updatebuildnumber]$(GitVersion.SemVer)"
